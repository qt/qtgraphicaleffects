/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Graphical Effects module.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\title Qt Graphical Effects
\page index.html
\brief Qt Graphical Effects module is a Qt Quick Add-On module.

The Qt Graphical Effects module provides a set of QML types for adding visually
impressive and configurable effects to user interfaces. Effects are visual
items that can be added to Qt Quick user interface as UI components.

The API consists of over 20 effects provided as separate QML types. The effects
cover functional areas such as blending, masking, blurring, coloring, and many more.

\section1 Getting started
To load Qt Graphical Effects, add the following import statement to your .qml file:
\snippet snippets/Blend-example.qml import

To use the effects, simply add a specific effect declaration to the QML scene and
configure the effects properties. Effects have one or more source properties for
specifying the visual input for which the effect is applied to. The altered visual
output is then presented in the effect item itself. The source can be another,
often hidden, item in the QML scene. More complex effects can have multiple sources.
The source item type can be any QML type, even video or another effect. Pipelining
multiple effects together is a simple way to create even more impressive output.

Each effect has a set of properties that can be used to configure the effect output.
Properties can be animated just like any other QML properties. The QML type
documentation contains property descriptions and basic usage examples.

Currently there is no C++ API.

\section1 QML API

The following list presents the functional division of types that are part of Qt Graphical Effects:

Blend
\list
\li \l {QtGraphicalEffects1.0::Blend}{Blend} - merges two source items by using a blend mode
\endlist

Color
\list
\li \l {QtGraphicalEffects1.0::BrightnessContrast}{BrightnessContrast} - adjusts brightness and contrast
\li \l {QtGraphicalEffects1.0::Colorize}{Colorize} - sets color in the HSL color space
\li \l {QtGraphicalEffects1.0::ColorOverlay}{ColorOverlay} - applies a color layer
\li \l {QtGraphicalEffects1.0::Desaturate}{Desaturate} - reduces color saturation
\li \l {QtGraphicalEffects1.0::GammaAdjust}{GammaAdjust} - adjusts luminance
\li \l {QtGraphicalEffects1.0::HueSaturation}{HueSaturation} - adjusts colors in the HSL color space
\li \l {QtGraphicalEffects1.0::LevelAdjust}{LevelAdjust} - adjusts colors in the RGB color space
\endlist

Gradient
\list
\li \l {QtGraphicalEffects1.0::ConicalGradient}{ConicalGradient} - draws a conical gradient
\li \l {QtGraphicalEffects1.0::LinearGradient}{LinearGradient} - draws a linear gradient
\li \l {QtGraphicalEffects1.0::RadialGradient}{RadialGradient} - draws a radial gradient
\endlist

Distortion
\list
\li \l {QtGraphicalEffects1.0::Displace}{Displace} - moves the pixels of the source item according to the specified displacement source
\endlist

Drop Shadow
\list
\li \l {QtGraphicalEffects1.0::DropShadow}{DropShadow} - draws a drop shadow
\li \l {QtGraphicalEffects1.0::InnerShadow}{InnerShadow} - draws an inner shadow
\endlist

Blur
\list
\li \l {QtGraphicalEffects1.0::FastBlur}{FastBlur} - applies a fast blur effect
\li \l {QtGraphicalEffects1.0::GaussianBlur}{GaussianBlur} - applies a higher quality blur effect
\li \l {QtGraphicalEffects1.0::MaskedBlur}{MaskedBlur} - applies a varying intensity blur effect
\li \l {QtGraphicalEffects1.0::RecursiveBlur}{RecursiveBlur} - blurs repeatedly, providing a strong blur effect
\endlist

Motion Blur
\list
\li \l {QtGraphicalEffects1.0::DirectionalBlur}{DirectionalBlur} - applies a directional motion blur effect
\li \l {QtGraphicalEffects1.0::RadialBlur}{RadialBlur} - applies a radial motion blur effect
\li \l {QtGraphicalEffects1.0::ZoomBlur}{ZoomBlur} - applies a zoom motion blur effect
\endlist

Glow
\list
\li \l {QtGraphicalEffects1.0::Glow}{Glow} - draws an outer glow effect
\li \l {QtGraphicalEffects1.0::RectangularGlow}{RectangularGlow} - draws a rectangular outer glow effect
\endlist

Mask
\list
\li \l {QtGraphicalEffects1.0::OpacityMask}{OpacityMask} - masks the source item with another item
\li \l {QtGraphicalEffects1.0::ThresholdMask}{ThresholdMask} - masks the source item with another item and applies a threshold value
\endlist

*/
