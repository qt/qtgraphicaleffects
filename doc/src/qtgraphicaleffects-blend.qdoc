/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Graphical Effects module.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmlclass Blend
    \inqmlmodule QtGraphicalEffects
    \brief Merges two source items by using a blend mode.

    Blend mode can be selected with the \l mode property.

    \table
    \header
        \o source
        \o foregroundSource
        \o Effect applied
    \row
        \o \image Original_bug.png
        \o \image Original_butterfly.png
        \o \image Blend_bug_and_butterfly.png
    \endtable

    \section1 Example

    The following example shows how to apply the effect.
    \snippet snippets/Blend-example.qml example

*/

/*!
    \qmlproperty variant QtGraphicalEffects::Blend::source

    This property defines the source item that is going to be the base when \l foregroundSource is blended over it.

*/

/*!
    \qmlproperty variant QtGraphicalEffects::Blend::foregroundSource

    This property defines the item that is going to be blended over the \l source.

*/

/*!
    \qmlproperty string QtGraphicalEffects::Blend::mode

    This property defines the mode which is used when foregroundSource is blended over source. Values are
    case insensitive.

    \table
    \header
        \o mode
        \o description
    \row
        \o normal
        \o The pixel component values from foregroundSource are written over source by using alpha blending.
    \row
        \o addition
        \o The pixel component values from source and foregroundSource are added together and written.
    \row
        \o average
        \o The pixel component values from source and foregroundSource are averaged and written.
    \row
        \o color
        \o The lightness value from source is combined with hue and saturation from foregroundSource and written.
    \row
        \o colorBurn
        \o The darker pixels from source are darkened more, if both source and foregroundSource pixels are light the result is light.
    \row
        \o colorDodge
        \o The lighter pixels from source are lightened more, if both source and foregroundSource pixels are dark the result is dark.
    \row
        \o darken
        \o The darker pixel component value from source and foregroundSource is written.
    \row
        \o darkerColor
        \o The lower luminance pixel rgb-value from source and foregroundSource is written.
    \row
        \o difference
        \o The absolute pixel component value difference between source and foregroundSource is written.
    \row
        \o divide
        \o The pixel component values from source is divided by the value from foregroundSource and written.
    \row
        \o exclusion
        \o The pixel component value difference with reduced contrast between source and foregroundSource is written.
    \row
        \o hardLight
        \o The pixel component values from source are lightened or darkened according to foregroundSource values and written.
    \row
        \o hue
        \o The hue value from foregroundSource is combined with saturation and lightness from source and written.
    \row
        \o lighten
        \o The lightest pixel component value from source and foregroundSource is written.
    \row
        \o lighterColor
        \o The higher luminance pixel rgb-value from source and foregroundSource is written.
    \row
        \o lightness
        \o The lightness value from foregroundSource is combined with hue and saturation from source and written.
    \row
        \o multiply
        \o The pixel component values from source and foregroundSource are multiplied together and written.
    \row
        \o negation
        \o The inverted absolute pixel component value difference between source and foregroundSource is written.
    \row
        \o saturation
        \o The saturation value from foregroundSource is combined with hue and lightness from source and written.
    \row
        \o screen
        \o The pixel values from source and foregroundSource are negated, then multiplied, negated again, and written.
    \row
        \o subtract
        \o Pixel value from foregroundSource is subracted from source and written.
    \row
        \o softLight
        \o The pixel component values from source are lightened or darkened slightly according to foregroundSource values and written.

    \endtable

    \table
    \header
        \o Example source
        \o Example foregroundSource
    \row
        \o \image Original_bug.png
        \o \image Original_butterfly.png
    \endtable

    \table
    \header
    \o Output examples with different mode values
    \o
    \o
    \row
        \o \image Blend_mode1.png
        \o \image Blend_mode2.png
        \o \image Blend_mode3.png
    \row
        \o \bold { mode: normal }
        \o \bold { mode: addition }
        \o \bold { mode: average }
    \row
        \o \image Blend_mode4.png
        \o \image Blend_mode5.png
        \o \image Blend_mode6.png
    \row
        \o \bold { mode: color }
        \o \bold { mode: colorBurn }
        \o \bold { mode: colorDodge }
    \row
        \o \image Blend_mode7.png
        \o \image Blend_mode8.png
        \o \image Blend_mode9.png
    \row
        \o \bold { mode: darken }
        \o \bold { mode: darkerColor }
        \o \bold { mode: difference }
    \row
        \o \image Blend_mode10.png
        \o \image Blend_mode11.png
        \o \image Blend_mode12.png
    \row
        \o \bold { mode: divide }
        \o \bold { mode: exclusion }
        \o \bold { mode: hardlight }
    \row
        \o \image Blend_mode13.png
        \o \image Blend_mode14.png
        \o \image Blend_mode15.png
    \row
        \o \bold { mode: hue }
        \o \bold { mode: lighten }
        \o \bold { mode: lighterColor }
    \row
        \o \image Blend_mode16.png
        \o \image Blend_mode17.png
        \o \image Blend_mode18.png
    \row
        \o \bold { mode: lightness }
        \o \bold { mode: negation }
        \o \bold { mode: multiply }
    \row
        \o \image Blend_mode19.png
        \o \image Blend_mode20.png
        \o \image Blend_mode21.png
    \row
        \o \bold { mode: saturation }
        \o \bold { mode: screen }
        \o \bold { mode: subtract }
    \row
        \o \image Blend_mode22.png
    \row
        \o \bold { mode: softLight }
    \endtable


*/

/*!
    \qmlproperty bool QtGraphicalEffects::Blend::cached

    This property allows the effect output pixels to be cached in order to improve the rendering performance.

    Every time the source or effect properties are changed, the pixels in the cache must be updated.
    Memory consumption is increased, because an extra buffer of memory is required for storing the effect output.

    It is recommended to disable the cache when the source or the effect properties are animated.

    By default, the property is set to false.

*/
