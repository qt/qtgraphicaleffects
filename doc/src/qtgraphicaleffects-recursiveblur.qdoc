/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Graphical Effects module.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmlclass RecursiveBlur
    \inqmlmodule QtGraphicalEffects
    \brief Blurs repeatedly, providing a strong blur effect.

    The RecursiveBlur effect softens the image by blurring it with an algorithm
    that uses a recursive feedback loop to blur the source multiple times. The
    effect may give more blurry results than \l {QtGraphicalEffects::GaussianBlur} {GaussianBlur} or \l FastBlur,
    but the result is produced asynchronously and takes more time.

    \table
    \header
        \o Source
        \o Effect applied
    \row
        \o \image Original_bug.png
        \o \image RecursiveBlur_bug.png
    \endtable

    \section1 Example

    The following example shows how to apply the effect.
    \snippet snippets/RecursiveBlur-example.qml example

*/

/*!
    \qmlproperty variant QtGraphicalEffects::RecursiveBlur::source

    This property defines the source item that is going to be blurred.

*/
/*!
    \qmlproperty real QtGraphicalEffects::RecursiveBlur::radius

    This property defines the distance of neighboring pixels which influence
    the blurring of individual pixels. A larger radius provides better quality,
    but is slower to render.

    \bold Note: The radius value in this effect is not intended to be changed or
    animated frequently. The correct way to use it is to set the correct value
    and keep it unchanged for the whole duration of the iterative blur sequence.

    The value ranges from (no blur) to 16.0 (maximum blur step). By default, the
    property is set to \c 0.0 (no blur).

    \table
    \header
    \o Output examples with different radius values
    \o
    \o
    \row
        \o \image RecursiveBlur_radius1.png
        \o \image RecursiveBlur_radius2.png
        \o \image RecursiveBlur_radius3.png
    \row
        \o \bold { radius: 2.5 }
        \o \bold { radius: 4.5 }
        \o \bold { radius: 7.5 }
    \row
        \o \l loops: 20
        \o \l loops: 20
        \o \l loops: 20
    \endtable

*/

/*!
    \qmlproperty bool QtGraphicalEffects::RecursiveBlur::transparentBorder

    This property defines the blur behavior near the edges of the item, where
    the pixel blurring is affected by the pixels outside the source edges.

    If the property is set to \c true, the pixels outside the source are
    interpreted to be transparent, which is similar to OpenGL clamp-to-border
    extension. The blur is expanded slightly outside the effect item area.

    If the property is set to \c false, the pixels outside the source are 
    interpreted to contain the same color as the pixels at the edge of the item, 
    which is similar to OpenGL clamp-to-edge behavior. The blur does not expand 
    outside the effect item area.

    By default, the property is set to \c false.

    \table
    \header
    \o Output examples with different transparentBorder values
    \o
    \o
    \row
        \o \image RecursiveBlur_transparentBorder1.png
        \o \image RecursiveBlur_transparentBorder2.png
    \row
        \o \bold { transparentBorder: false }
        \o \bold { transparentBorder: true }
    \row
        \o \l loops: 20
        \o \l loops: 20
    \row
        \o \l radius: 7.5
        \o \l radius: 7.5
    \endtable

*/

/*!
    \qmlproperty bool QtGraphicalEffects::RecursiveBlur::cached

    This property allows the effect output pixels to be cached in order to
    improve the rendering performance.

    Every time the source or effect properties are changed, the pixels in the
    cache must be updated. Memory consumption is increased, because an extra
    buffer of memory is required for storing the effect output.

    It is recommended to disable the cache when the source or the effect
    properties are animated.

    By default, the property is set to \c false

*/

/*!
    \qmlproperty real QtGraphicalEffects::RecursiveBlur::progress

    This property holds the progress of asynchronous source blurring process, from 0.0 (nothing blurred) to 1.0 (finished).

*/

/*!
    \qmlproperty int QtGraphicalEffects::RecursiveBlur::loops

    This property defines the amount of blur iterations that are going to be
    performed for the source. When the property changes, the iterative blurring
    process starts. If the value is decreased or if the value changes from zero
    to non-zero, a snapshot is taken from the source. The snapshot is used as a
    starting point for the process.

    The iteration loop tries to run as fast as possible. The speed might be
    limited by the VSYNC or the time needed for one blur step, or both.
    Sometimes it may be desirable to perform the blurring with a slower pace. In
    that case, it may be convenient to control the property with Animation which
    increases the value.

    The value ranges from 0 to inf. By default, the property is set to \c 0.

    \table
    \header
    \o Output examples with different loops values
    \o
    \o
    \row
        \o \image RecursiveBlur_loops1.png
        \o \image RecursiveBlur_loops2.png
        \o \image RecursiveBlur_loops3.png
    \row
        \o \bold { loops: 4 }
        \o \bold { loops: 20 }
        \o \bold { loops: 70 }
    \row
        \o \l radius: 7.5
        \o \l radius: 7.5
        \o \l radius: 7.5
    \endtable

*/
